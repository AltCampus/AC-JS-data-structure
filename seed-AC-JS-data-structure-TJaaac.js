var Topic = require('../../models/topic'); 
var Exercise = require('../../models/exercise'); 
var Block = require('../../models/block');

var seeder = async () => {
 try {
 console.log('start running'); 
var topic = await Topic.create({"name":"Data Structure (Object and Array)","uniqueCode":"TJaaac","githubAssignmentRepo":"https://github.com/AltCampus/TA-JS-data-structure-TJaaac","githubRepo":"AltCampus/TA-JS-data-structure-TJaaac","slug":"data-structure-(object-and-array)-tjaaac","isPublished":true}); 

var exercise0 = await Exercise.create({"name":"Understanding Objects","uniqueCode":"EJaaan","type":"content","githubBranchName":"ex1-EJaaan","description":"","displayName":"Understanding Objects","topicId":topic._id,"slug":"ex1-object-ejaaan-EJaaan","isPublished":true}); 
var block00 = await Block.create({"name":"Understanding Objects","displayName":"Understanding Objects","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex1-object-EJaaan/block-01-BJaabz/index.md","uniqueCode":"BJaabz","type":"readText","level":1,"contentType":"","automatedFeedback":"","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise0._id,"topicId":topic._id,"slug":"block-01-bjaabz-BJaabz","isPublished":true,"description":"We will learn about why we need object. We will also get to know the operations like adding, deleting and updating properties.\n\n#### Working with objects\n\n<div class=\"youtube-embed\">\n  <iframe src=\"https://www.youtube-nocookie.com/embed/2twZLUKlUHY?rel=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n"}); 
var block01 = await Block.create({"name":"Assignment: Accessing and Assigning","displayName":"Assignment: Accessing and Assigning","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex1-object-EJaaan/block-02-BJaaca/index.md","uniqueCode":"BJaaca","type":"writeCode","level":1,"contentType":"csb","automatedFeedback":"https://youtu.be/axhCBkaDhkU","githubBranchName":"block-BJaaca","openFile":"./block-BJaaca","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise0._id,"topicId":topic._id,"slug":"block-02-bjaaca-BJaaca","isPublished":true,"description":"#### Read the following instructions and complete the exercise:\n\n1. You will find a file named `index.js` inside the folder named `code`\n2. `index.js` file will contain all the instructions\n3. Solve below each instruction\n4. You can also use `index.html` to open in browser to check the output.\n"}); 
var block02 = await Block.create({"name":"Assignment: Dot and Bracket Notation","displayName":"Assignment: Dot and Bracket Notation","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex1-object-EJaaan/block-03-BJaacb/index.md","uniqueCode":"BJaacb","type":"writeTextAnswer","level":1,"contentType":"","automatedFeedback":"https://youtu.be/cWLZVJBvxxI","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise0._id,"topicId":topic._id,"slug":"block-03-bjaacb-BJaacb","isPublished":true,"description":"- Can you define the key named `let, var, true, or const` or any other JavaScript keywords in an object. Explain why?\n\n#### Accessing values from object\n\n```js\nlet keyValue = 'username';\nlet charactor = {\n  username: 'arya',\n};\n// 1.\nconsole.log(charactor['keyValue']);\n// 2.\nconsole.log(charactor[keyValue]);\n```\n\nAfter going through the code above answer the following\n\n- What will be the output of 1 and 2\n- Why are they different\n- Can I use `.` dot notation to access the value (using variable name). Explain reason?\n- What is the difference between `.` dot notation and `[]` bracket notation. Explain\n- What are situation where we use dot notation and bracket notation.\n"}); 
var block03 = await Block.create({"name":"Assignment: Object Practice","displayName":"Assignment: Object Practice","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex1-object-EJaaan/block-04-BJaacc/index.md","uniqueCode":"BJaacc","type":"writeCode","level":1,"contentType":"csb","automatedFeedback":"https://youtu.be/YoI2V9zyxsA","githubBranchName":"block-BJaacc","openFile":"./block-BJaacc","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise0._id,"topicId":topic._id,"slug":"block-04-bjaacc-BJaacc","isPublished":true,"description":"#### Read the following instructions and complete the exercise:\n\n1. You will find a file named `index.js` inside the folder named `code`\n2. `index.js` file will contain all the instructions\n3. Solve below each instruction\n4. You can also use `index.html` to open in browser to check the output.\n"}); 
exercise0.blocks=[block00._id,block01._id,block02._id,block03._id]; 
exercise0.save(); 


var exercise1 = await Exercise.create({"name":"Understanding Arrays","uniqueCode":"EJaaao","type":"content","githubBranchName":"ex2-EJaaao","description":"","displayName":"Understanding Arrays","topicId":topic._id,"slug":"ex2-array-ejaaao-EJaaao","isPublished":true}); 
var block10 = await Block.create({"name":"Understanding: Arrays","displayName":"Understanding: Arrays","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex2-array-EJaaao/block-01-BJaacd/index.md","uniqueCode":"BJaacd","type":"readText","level":1,"contentType":"","automatedFeedback":"","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise1._id,"topicId":topic._id,"slug":"block-01-bjaacd-BJaacd","isPublished":true,"description":"We will learn about the second type of data structure known as array. We will also get to know the operations like adding, deleting and updating properties.\n\n#### Working with arrays\n\n<div class=\"youtube-embed\">\n  <iframe src=\"https://www.youtube-nocookie.com/embed/F0pJSoUbh1k?rel=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n#### Iterating over Arrays\n\n<div class=\"youtube-embed\">\n  <iframe src=\"https://www.youtube-nocookie.com/embed/EOrAN7jWCWw?rel=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n"}); 
var block11 = await Block.create({"name":"Assignment: Operation on Arrays","displayName":"Assignment: Operation on Arrays","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex2-array-EJaaao/block-02-BJaace/index.md","uniqueCode":"BJaace","type":"writeCode","level":1,"contentType":"csb","automatedFeedback":"https://youtu.be/h3PYn-A4ELI","githubBranchName":"block-BJaace","openFile":"./block-BJaace","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise1._id,"topicId":topic._id,"slug":"block-02-bjaace-BJaace","isPublished":true,"description":"#### Read the following instructions and complete the exercise:\n\n1. You will find a file named `index.js` inside the folder named `code`\n2. `index.js` file will contain all the instructions\n3. Solve below each instruction\n4. You can also use `index.html` to open in browser to check the output.\n"}); 
var block12 = await Block.create({"name":"Assignment: Array Iteration","displayName":"Assignment: Array Iteration","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex2-array-EJaaao/block-03-BJaacf/index.md","uniqueCode":"BJaacf","type":"writeCode","level":1,"contentType":"csb","automatedFeedback":"https://youtu.be/WwcodKWsd1A","githubBranchName":"block-BJaacf","openFile":"./block-BJaacf","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise1._id,"topicId":topic._id,"slug":"block-03-bjaacf-BJaacf","isPublished":true,"description":"#### Read the following instructions and complete the exercise:\n\n1. You will find a file named `index.js` inside the folder named `code`\n2. `index.js` file will contain all the instructions\n3. Solve below each instruction\n4. You can also use `index.html` to open in browser to check the output.\n"}); 
exercise1.blocks=[block10._id,block11._id,block12._id]; 
exercise1.save(); 


var exercise2 = await Exercise.create({"name":"Working with Objects","uniqueCode":"EJaaap","type":"content","githubBranchName":"ex3-EJaaap","description":"","displayName":"Working with Objects","topicId":topic._id,"slug":"ex3-array-and-object-ejaaap-EJaaap","isPublished":true}); 
var block20 = await Block.create({"name":"Working with Arrays and Objects","displayName":"Working with Arrays and Objects","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex3-array-and-object-EJaaap/block-01-BJaacg/index.md","uniqueCode":"BJaacg","type":"readText","level":1,"contentType":"","automatedFeedback":"","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise2._id,"topicId":topic._id,"slug":"block-01-bjaacg-BJaacg","isPublished":true,"description":"We will learn about working with array inside object and object inside array.\n\n#### Working with array and object\n\n<div class=\"youtube-embed\">\n  <iframe src=\"https://www.youtube-nocookie.com/embed/vHoQ0Gu0494?rel=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n"}); 
var block21 = await Block.create({"name":"Assignment: Array and Object","displayName":"Assignment: Array and Object","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex3-array-and-object-EJaaap/block-02-BJaach/index.md","uniqueCode":"BJaach","type":"writeTextAnswer","level":1,"contentType":"","automatedFeedback":"https://youtu.be/Qjb5EoJy56M","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise2._id,"topicId":topic._id,"slug":"block-02-bjaach-BJaach","isPublished":true,"description":"#### What will be the output of the following code snippet given below:\n\n1. What does the following code print to the console?\n\n```jsx\nlet hat = {\n  size: 'large',\n  color: 'orange',\n};\nconsole.log(hat.size);\n\n// Output -\n```\n\n2. What does the following code print to the console?\n\n```jsx\nlet hat = {\n  size: 'large',\n  color: 'orange',\n};\nconsole.log(hat['color']);\n\n// Output -\n```\n\n3. What does the following code print to the console?\n\n```jsx\nlet hat = {\n  size: 'large',\n  color: 'orange',\n};\n\nhat.color = 'red';\nconsole.log(hat.color);\n\n// Output -\n```\n\n4. What does the following code print to the console?\n\n```jsx\nlet pen = {};\npen.ink = 'blue';\nconsole.log(pen.ink);\n\n// Output -\n```\n\n5. What does the following code print to the console?\n\n```jsx\nlet hat = {\n  size: 'large',\n  color: 'orange',\n};\n\nconsole.log(hat['cost']);\n\n// Output -\n```\n\n6. What does the following code print to the console?\n\n```jsx\nlet hat = {\n  rating: function () {\n    return 'Hat is top rated';\n  },\n  color: 'green',\n};\nconsole.log(hat.rating());\n\n// Output -\n```\n\n7. What does the following code print to the console?\n\n```jsx\nlet hat = {\n  size: 'medium',\n  color: 'green',\n  introduction: function () {\n    return `The size of hat is ${hat.size} and color is ${hat.color}`;\n  },\n};\nhat.introduction();\n\n// Output -\n```\n\n8. What does the following code print to the console?\n\n```jsx\nlet hat = {\n  rating: function () {\n    return 'Hat is top rated';\n  },\n  color: 'green',\n};\nconsole.log(hat.rating());\n\n// Output -\n```\n\n9. What does the following code print to the console?\n\n```jsx\nlet bucket = {\n  capacity: '5 Litre',\n  customerMessage: function (desiredSize) {\n    if (desiredSize > 5) {\n      return 'This bucket is not large enough for you';\n    }\n  },\n};\nconsole.log(bucket.customerMessage(13));\n\n// Output -\n```\n\n10. What does the following code print to the console?\n\n```jsx\nfunction globalFunction() {\n  return 'I can be called anywhere';\n}\nlet obj = {\n  func: globalFunction,\n};\nconsole.log(obj.func());\n\n// Output -\n```\n\n11. What does the following code print to the console?\n\n```jsx\nlet student = {\n  age: 21,\n  address: {\n    city: 'Dharamshala',\n    state: 'Himachal Pradesh',\n  },\n};\nconsole.log(student.address.city);\n\n// Output -\n```\n\n12. What does the following code print to the console?\n\n```jsx\nlet student = {\n  age: 21,\n  address: {\n    city: 'Dharamshala',\n    state: 'Himachal Pradesh',\n  },\n};\nstudent.address.zip = '176057';\nconsole.log(student.address.zip);\n\n// Output -\n```\n\n13. What does the following code print to the console?\n\n```jsx\nlet student = {\n  age: 21,\n  address: {\n    city: 'Dharamshala',\n    state: 'Himachal Pradesh',\n  },\n};\nconsole.log(student);\ndelete student.age;\nconsole.log(student);\n\n// Output -\n```\n\n14. What does the following code print to the console?\n\n```jsx\nvar altcampus = {\n  batch16: {\n    totalStudents: '11',\n  },\n  batch15: {\n    totalStudents: '9',\n  },\n  batch14: {\n    totalStudents: '8',\n  },\n};\nconsole.log(altcampus.batch16.totalStudents);\n\n// Output -\n```\n\n15. What does the following code print to the console?\n\n```jsx\nvar obj = {\n  name: 'Panther',\n};\nconsole.log('name' in obj);\n\n// Output -\n```\n"}); 
var block22 = await Block.create({"name":"Assignment: Array and Object","displayName":"Assignment: Array and Object","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex3-array-and-object-EJaaap/block-03-BJaaci/index.md","uniqueCode":"BJaaci","type":"writeCode","level":1,"contentType":"csb","automatedFeedback":"https://youtu.be/RPxvZSV3rYs","githubBranchName":"block-BJaaci","openFile":"./block-BJaaci","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise2._id,"topicId":topic._id,"slug":"block-03-bjaaci-BJaaci","isPublished":true,"description":"#### Read the following instructions and complete the exercise:\n\n1. You will find a file named `index.js` inside the folder named `code`\n2. `index.js` file will contain all the instructions\n3. Solve below each instruction\n4. You can also use `index.html` to open in browser to check the output.\n"}); 
exercise2.blocks=[block20._id,block21._id,block22._id]; 
exercise2.save(); 


var exercise3 = await Exercise.create({"name":"Copy by Value and Reference","uniqueCode":"EJaaaq","type":"content","githubBranchName":"ex4-EJaaaq","description":"","displayName":"Copy by Value and Reference","topicId":topic._id,"slug":"ex4-copy-by-ref-value-ejaaaq-EJaaaq","isPublished":true}); 
var block30 = await Block.create({"name":"Copy by Value and Reference","displayName":"Copy by Value and Reference","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex4-copy-by-ref-value-EJaaaq/block-01-BJaacj/index.md","uniqueCode":"BJaacj","type":"readText","level":1,"contentType":"","automatedFeedback":"","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise3._id,"topicId":topic._id,"slug":"block-01-bjaacj-BJaacj","isPublished":true,"description":"We will learn about the main difference between primitive and non-primitive.\n\n#### Copy by value and reference\n\n<div class=\"youtube-embed\">\n  <iframe src=\"https://www.youtube-nocookie.com/embed/1intnGVvh3A?rel=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n#### Primitive and Non-Primitive\n\n<div class=\"youtube-embed\">\n  <iframe src=\"https://www.youtube-nocookie.com/embed/vHoQ0Gu0494?rel=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n"}); 
var block31 = await Block.create({"name":"Assignment: Copy by value and reference","displayName":"Assignment: Copy by value and reference","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex4-copy-by-ref-value-EJaaaq/block-02-BJaack/index.md","uniqueCode":"BJaack","type":"writeTextAnswer","level":1,"contentType":"","automatedFeedback":"https://youtu.be/hjDLypDwQTI","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise3._id,"topicId":topic._id,"slug":"block-02-bjaack-BJaack","isPublished":true,"description":"#### Copy by value and reference\n\n1. Go through the code and answer\n\n```js\nlet x = 10;\nlet y = 'Hello';\nlet a = x;\nlet b = y;\n```\n\nAnswer the following after looking at above code along with the reason:\n\n- Value of x // output\n- Value of y\n- Value of a\n- Value of b\n\n---\n\n2. Go through the code and answer\n\n```js\nvar x = 10;\nvar y = 'Hello';\nvar a = x;\nvar b = y;\na = 5;\nb = 'test';\n```\n\nAnswer the following after looking at above code along with the reason:\n\n- Value of x // output\n- Value of y\n- Value of a\n- Value of b\n\n---\n\n3. Go through the code and answer\n\n```js\nvar users = ['sam', 'aman'];\nvar usersCopy = arr;\nusers.push('nathan');\n```\n\nAnswer the following after looking at above code along with the reason:\n\n- Value of `users` // output\n- Value of `usersCopy`\n- Length of the `users` variable\n- Length of the `usersCopy` variable\n\n---\n\n4. Go through the code and answer\n\n```js\nlet a = { language: 'Javascript' };\nlet b = learn;\n\nconsole.log(a); // 1\nconsole.log(b); // 2\n\na.language = 'Python';\n\nconsole.log(a); // 3\nconsole.log(b); // 4\n```\n\nAnswer the following after looking at above code along with the reason:\n\n- Output of 1 // output\n- Output of 2\n- Output of 3\n- Output of 4\n\n5. Go through the code and answer\n\n```js\nlet username = 'Arya';\nlet usernameCopy = username;\nlet userInfo = {\n  name: 'John',\n};\nlet userCopy = userInfo;\n```\n\nAnswer the following after looking at above code along with the reason:\n\n```js\nusername == usernameCopy; // output\nusername === usernameCopy;\nuserInfo === userCopy;\nuserInfo == userCopy;\nuserInfo.name == userCopy.name;\nuserInfo.name === userCopy.name;\nusername == userInfo.name;\n```\n\n---\n\n6. What does the following code print to the console?\n\n```jsx\nvar game = { game: 'Vollyball' };\nconsole.log(game === game);\n\n// Output -\n```\n\n---\n\n7. What does the following code print to the console and Why?\n\n```jsx\nvar game = { title: 'Vollyball' };\nvar sameGame = { title: 'Vollyball' };\nconsole.log(game === sameGame);\n\n// Output -\n```\n"}); 
var block32 = await Block.create({"name":"Assignment: Primitive vs Non Primitive","displayName":"Assignment: Primitive vs Non Primitive","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex4-copy-by-ref-value-EJaaaq/block-03-BJaacl/index.md","uniqueCode":"BJaacl","type":"writeTextAnswer","level":1,"contentType":"","automatedFeedback":"","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise3._id,"topicId":topic._id,"slug":"block-03-bjaacl-BJaacl","isPublished":true,"description":"- List all the primitive and non-primitive data types in JavaScript.\n- Explain the difference between Primitive and Non-Primitive with examples.\n- Explain copy by value and copy by reference with examples\n- Explain mutation with example\n"}); 
exercise3.blocks=[block30._id,block31._id,block32._id]; 
exercise3.save(); 


var exercise4 = await Exercise.create({"name":"Assignment Level 2","uniqueCode":"EJaaar","type":"content","githubBranchName":"ex5-EJaaar","description":"","displayName":"Assignment Level 2","topicId":topic._id,"slug":"ex5-assignment-level-2-ejaaar-EJaaar","isPublished":true}); 
var block40 = await Block.create({"name":"Assignment Level 2","displayName":"Assignment Level 2","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex5-assignment-level-2-EJaaar/block-01-BJaacm/index.md","uniqueCode":"BJaacm","type":"writeCode","level":1,"contentType":"csb","automatedFeedback":"https://www.youtube.com/watch?v=DJxg1Da8RK0","githubBranchName":"block-BJaacm","openFile":"./block-BJaacm","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise4._id,"topicId":topic._id,"slug":"block-01-bjaacm-BJaacm","isPublished":true,"description":"#### Read the following instructions and complete the exercise:\n\n1. You will find a file named `index.md` inside the folder named `code`\n2. `index.md` file will contain all the instructions.\n3. Solve below each instructions\n4. If asked to add images add in the `code` folder. To add image in markdown you can use `![name](./hello.jpg)`\n"}); 
var block41 = await Block.create({"name":"Quiz 🔥","displayName":"Quiz 🔥","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex5-assignment-level-2-EJaaar/block-02-BJaacn/index.md","uniqueCode":"BJaacn","type":"writeQuiz","level":1,"contentType":"","automatedFeedback":"","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"true","b":"false"},"quizCorrectAnswerOptions":["b"],"correctAnswerExplanation":"Whenever new object is created it is stored at different addresses. So the value of bot variable will be different.","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise4._id,"topicId":topic._id,"slug":"block-02-bjaacn-BJaacn","isPublished":true,"description":"What will be the output in the console:\n\n```js\nlet user = {\n  name: 'John',\n};\nlet secondUser = {\n  name: 'John',\n};\n\nconsole.log(user === secondUser);\n```\n"}); 
var block42 = await Block.create({"name":"Assignment Level 2","displayName":"Assignment Level 2","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex5-assignment-level-2-EJaaar/block-03-BJaaco/index.md","uniqueCode":"BJaaco","type":"writeCode","level":1,"contentType":"csb","automatedFeedback":"https://youtu.be/EMRiQYH3veM","githubBranchName":"block-BJaaco","openFile":"./block-BJaaco","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise4._id,"topicId":topic._id,"slug":"block-03-bjaaco-BJaaco","isPublished":true,"description":"#### Read the following instructions and complete the exercise:\n\n1. You will find a file named `index.js` inside the folder named `code`\n2. `index.js` file will contain all the instructions\n3. Solve below each instruction\n4. You can also use `index.html` to open in browser to check the output.\n"}); 
exercise4.blocks=[block40._id,block41._id,block42._id]; 
exercise4.save(); 


var exercise5 = await Exercise.create({"name":"Assignment Level 3","uniqueCode":"EJaaas","type":"content","githubBranchName":"ex6-EJaaas","description":"","displayName":"Assignment Level 3","topicId":topic._id,"slug":"ex6-assignment-level-3-ejaaas-EJaaas","isPublished":true}); 
var block50 = await Block.create({"name":"Assignment Level 3","displayName":"Assignment Level 3","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex6-assignment-level-3-EJaaas/block-01-BJaacp/index.md","uniqueCode":"BJaacp","type":"writeCode","level":1,"contentType":"csb","automatedFeedback":"https://youtu.be/MteVL91-mQo","githubBranchName":"block-BJaacp","openFile":"./block-BJaacp","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise5._id,"topicId":topic._id,"slug":"block-01-bjaacp-BJaacp","isPublished":true,"description":"#### Read the following instructions and complete the exercise:\n\n1. You will find a file named `index.md` inside the folder named `code`\n2. `index.md` file will contain all the instructions.\n3. Solve below each instructions\n4. If asked to add images add in the `code` folder. To add image in markdown you can use `![name](./hello.jpg)`\n"}); 
var block51 = await Block.create({"name":"Assignment Level 3","displayName":"Assignment Level 3","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex6-assignment-level-3-EJaaas/block-02-BJaacq/index.md","uniqueCode":"BJaacq","type":"writeTextAnswer","level":1,"contentType":"","automatedFeedback":"","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise5._id,"topicId":topic._id,"slug":"block-02-bjaacq-BJaacq","isPublished":true,"description":"#### Understanding copy by reference\n\n```js\nlet brothers = ['John', 'Bran', 'Robb'];\nlet house = 'Stark';\nlet user = {\n  name: 'Arya',\n  house: house,\n  brothers: brothers,\n};\n\nlet user2 = {\n  name: 'Arya',\n  house: house,\n  brothers: brothers,\n};\n\nlet user3 = {\n  name: 'Arya',\n  house: 'Stark',\n  brothers: ['John', 'Bran', 'Robb'],\n};\n```\n\n1. After going through above code answer the following with reason:\n\n```js\nuser.house === user2.house; // output:\nuser.house == user2.house; // output:\nuser.brothers === user2.brothers; // output:\nuser.brothers == user2.brothers; // output:\nuser.name == user2.name; // output:\nuser.name === user2.name; // output:\nuser.brothers == user3.brothers; // output:\nuser.brothers === user3.brothers; // output:\nuser.house === user2.house; // output\nuser.house === user3.house; // output\nuser.brothers[0] === user2.brothers[0]; // output\nuser.brothers[0] === user3.brothers[0]; // output\n```\n\n2. Copy the value of `character` variable into variable named `characterOne` and `characterTwo`.\n\n```js\nlet charactor = {\n  charactorName: 'Sansa',\n  sisters: 1,\n  brothers: 4,\n};\n// Your code\n```\n\nCheck the output of below code after copying. The output of all of all of the below should be `true`\n\n```js\ncharactor === characterOne;\ncharacterOne == characterTwo;\ncharacterTwo == character;\n```\n\n3. Clone (no reference) the value of `character` variable into variables named `characterThree` and `characterFour`.\n\n```js\nlet charactor = {\n  charactorName: 'Sansa',\n  sisters: 1,\n  brothers: 4,\n};\n\n// Your code\n```\n\nCheck your result by comparing the values:\nAll the below result should be false.\n\n```js\ncharactor === characterOne;\ncharacterOne == characterTwo;\ncharacterTwo == character;\n```\n"}); 
var block52 = await Block.create({"name":"Assignment Level 3","displayName":"Assignment Level 3","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex6-assignment-level-3-EJaaas/block-03-BJaacr/index.md","uniqueCode":"BJaacr","type":"writeCode","level":1,"contentType":"csb","automatedFeedback":"https://youtu.be/4vmdKc0u0es","githubBranchName":"block-BJaacr","openFile":"./block-BJaacr","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise5._id,"topicId":topic._id,"slug":"block-03-bjaacr-BJaacr","isPublished":true,"description":"#### Read the following instructions and complete the exercise:\n\n1. You will find a file named `index.js` inside the folder named `code`\n2. `index.js` file will contain all the instructions\n3. Solve below each instruction\n4. There is an extra file named `data.js` which contains the data for the exercise.\n5. You can also use `index.html` to open in browser to check the output.\n"}); 
var block53 = await Block.create({"name":"Cloning Array and Object","displayName":"Cloning Array and Object","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex6-assignment-level-3-EJaaas/block-04-BJaacs/index.md","uniqueCode":"BJaacs","type":"readText","level":1,"contentType":"","automatedFeedback":"","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise5._id,"topicId":topic._id,"slug":"block-04-bjaacs-BJaacs","isPublished":true,"description":"We will learn about shallow and deep cloning using spread operator.\n\n#### Shallow and deep cloning\n\n<div class=\"youtube-embed\">\n  <iframe src=\"https://www.youtube-nocookie.com/embed/XLnOQH8_UCg?rel=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n"}); 
var block54 = await Block.create({"name":"Cloning Array and Object","displayName":"Cloning Array and Object","descriptionURL":"https://github.com/AltCampus/AC-JS-data-structure-TJaaac/tree/master/Ex6-assignment-level-3-EJaaas/block-05-BJaact/index.md","uniqueCode":"BJaact","type":"writeTextAnswer","level":1,"contentType":"","automatedFeedback":"","githubBranchName":"","openFile":"","isTestable":false,"estimatedTimeToComplete":0,"isPotentialInterviewQuestion":false,"quizOptions":{"a":"","b":"","c":"","d":""},"quizCorrectAnswerOptions":[],"correctAnswerExplanation":"","todo":{"isReviewed":false,"isAssignmentDone":true,"shouldSplitBlock":false,"actionsRequired":[{"videoId":"","scrimbaId":"","type":"toVideo","topic":""}]},"exerciseId":exercise5._id,"topicId":topic._id,"slug":"block-05-bjaact-BJaact","isPublished":true,"description":"1. Write the output with reason\n\n```js\nconst person = {\n  firstName: 'John',\n  lastName: 'Doe',\n};\n\nlet person2 = person;\n\nperson.firstName = 'Arya';\n\nconsole.log(person2.firstName); // output\nconsole.log(person.firstName); // output\nconsole.log(person.lastName); // output\nconsole.log(person == person2); // output\nconsole.log(person === person2); // output\nconsole.log(person.lastName === person2.lastName); // output\n```\n\n2. Write the output with reason\n\n```js\nconst person = {\n  firstName: 'John',\n  lastName: 'Doe',\n};\n\nlet person2 = { ...person };\n\nperson.firstName = 'Arya';\n\nconsole.log(person2.firstName); // output\nconsole.log(person.firstName); // output\nconsole.log(person.lastName); // output\nconsole.log(person == person2); // output\nconsole.log(person === person2); // output\nconsole.log(person.lastName === person2.lastName); // output\n```\n\n3. Write the output with reason:\n\n```js\nlet person = {\n  firstName: 'John',\n  lastName: 'Doe',\n  address: {\n    street: 'North 1st',\n    city: 'San Jose',\n    state: 'CA',\n    country: 'USA',\n  },\n};\n\nlet personTwo = { ...person };\n\nperson.firstName = 'Arya';\nperson.city = 'Navada';\n\nconsole.log(personTwo.firstName); // output\nconsole.log(person.firstName); // output\nconsole.log(personTwo.lastName); // output\nconsole.log(person.firstName === personTwo.firstName); // output\nconsole.log(person == personTwo); // output\nconsole.log(person === personTwo); // output\nconsole.log(person.address === personTwo.address); // output\nconsole.log(person.address == personTwo.address); // output\nconsole.log(personTwo.address.city); // output\nconsole.log(person.address.city); // output\nconsole.log(person.address.city == personTwo.address.city); // output\n```\n\n4. Write the output with reason:\n\n```js\nlet person = {\n  firstName: 'John',\n  lastName: 'Doe',\n  address: {\n    street: 'North 1st',\n    city: 'San Jose',\n    state: 'CA',\n    country: 'USA',\n  },\n};\n\nlet personTwo = { ...person, address: { ...person.address } };\n\nperson.firstName = 'Arya';\nperson.city = 'Navada';\n\nconsole.log(personTwo.firstName); // output\nconsole.log(person.firstName); // output\nconsole.log(personTwo.lastName); // output\nconsole.log(person.firstName === personTwo.firstName); // output\nconsole.log(person == personTwo); // output\nconsole.log(person === personTwo); // output\nconsole.log(person.address === personTwo.address); // output\nconsole.log(person.address == personTwo.address); // output\nconsole.log(personTwo.address.city); // output\nconsole.log(person.address.city); // output\nconsole.log(person.address.city == personTwo.address.city); // output\n```\n\n5. Clone the `blogs` variable into a new variable named `clonedBlogs`\n\n```js\nlet blogs = [\n  {\n    id: 1,\n    title: 'Post #1',\n    body: 'My first blog post',\n  },\n  {\n    id: 2,\n    title: 'Post #2',\n    body: 'My second blog post',\n  },\n  {\n    id: 3,\n    title: 'Post #3',\n    body: 'My third blog post',\n  },\n];\n\n// Your code goes here\n```\n\n6. Clone the `question` variable into a new variable named `questionClone`\n\n```js\nvar questions = [\n  {\n    prompt: 'Why is the sky blue?',\n    responses: [\n      'Because the color blue was on sale at Wallmart',\n      'Because blue is the prettiest color',\n      'Because the air molecules difract blue light more than any other color',\n    ],\n  },\n  {\n    prompt: 'Why are leaves usually green?',\n    responses: [\n      'So green caterpillars can hide better.',\n      'Because leaves can more easily make energy with green light',\n      \"Because leaves absorb red and blue light so it's green that is reflected\",\n    ],\n  },\n];\n\n// Your code goes here\n```\n\n7. Clone the `allBlogs` variable into a new variable named `allBlogsClone`\n\n```js\nvar allBlogs = {\n    id: 1,\n    title: \"Alamofire JSON Serialization\",\n    body: \"All about serialization in Alamofire...\",\n    author: {\n        id, 1,\n        fullName: \"Jeff Potter\",\n        username: \"jpotts18\"\n    },\n    comments: [\n        {\n          id: 1,\n          body: \"Thanks for the help Jeff, this saved me hours\"\n        },\n        {\n          id: 2,\n          body: \"Your welcome. I am happy to help!\"\n        }\n    ]\n}\n\n// Your code goes here\n```\n\n8. Clone the `person` variable into a new variable named `clonedPerson`\n\n```js\nlet person = [\n  {\n    input: { name: 'Ryan' },\n    output: { name: 'Ryan' },\n  },\n  {\n    input: { name: { first: 'Ryan', last: 'Haskell-Glatz' } },\n    output: { firstName: 'Ryan', lastName: 'Haskell-Glatz' },\n  },\n  {\n    input: { name: 'Ryan', age: 24 },\n    output: { name: 'Ryan', age: 24 },\n  },\n  {\n    input: {\n      name: { first: 'Ryan', last: 'Haskell-Glatz' },\n      birthday: { year: 1993, month: 'Nov' },\n    },\n    output: {\n      firstName: 'Ryan',\n      lastName: 'Haskell-Glatz',\n      birthdayYear: 1993,\n      birthdayMonth: 'Nov',\n    },\n  },\n];\n\n// Your code goes here\n```\n\n9. Write a function named `cloneObject` that accepts an object and returns the clone of the object\n\n```js\nfunction cloneObject() {\n  // your code\n}\n\n// Run the test below to check your function\n\nlet user = {\n  name: 'John',\n  house: 'Stark',\n  sisters: ['Arya', 'Sansa'],\n};\nlet cloned = cloneObject(user);\n\nlet person = {\n  firstName: 'John',\n  lastName: 'Doe',\n  address: {\n    street: 'North 1st',\n    city: 'San Jose',\n    state: 'CA',\n    country: 'USA',\n  },\n};\n\nlet clonedPerson = cloneObject(user);\n\nconsole.log(\n  `The user object is ${\n    user == cloned ? `not clone` : `cloned successfully 😁👑`\n  }`\n);\nconsole.log(\n  `The person object is ${\n    person == clonedPerson ? `not clone` : `cloned successfully 😁👑`\n  }`\n);\n```\n"}); 
exercise5.blocks=[block50._id,block51._id,block52._id,block53._id,block54._id]; 
exercise5.save(); 


topic.exercises=[exercise0._id,exercise1._id,exercise2._id,exercise3._id,exercise4._id,exercise5._id]; 
topic.save(); 

 console.log('stop running');

} catch(err) { 
 console.log('err', err); 
} 


}

module.exports = seeder;